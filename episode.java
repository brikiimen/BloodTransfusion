package transfusionsanguine;





import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import static transfusionsanguine.DossierPatient.datenes;
import static transfusionsanguine.DossierPatient.jTextField1;
import static transfusionsanguine.DossierPatient.nom;
import static transfusionsanguine.DossierPatient.prenom;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author lenovo
 */
public class episode extends javax.swing.JFrame {
 Connection conn ;
 PreparedStatement pst,pstsel,pstsel1 ;
 ResultSet rs,rssel,rssel1;
 public static String ep;

    /**
     * Creates new form inpatient
     * 
     */
    public episode()  {
         initComponents();
       String[] T = new String [2];
        conn = Transfusion.conn();
        try{
         String sql ="select * from  episode  ";
          pst = conn.prepareStatement(sql);
          rs = pst.executeQuery();
      DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
          while (rs.next()) {
           
            if(inpatient.id.equals(rs.getString("idpatient"))){
            T[0]=rs.getString("idpatient");
            T[1]=rs.getString("idepisode");
            model.addRow(T);}}}
          catch(SQLException e){
               JOptionPane.showMessageDialog(null,e);
                  }
                          
              DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
              TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
              jTable1.setRowSorter(sorter);
              jTextField1.addKeyListener(new KeyAdapter() {
               public void keyReleased(KeyEvent e) {
                String text = jTextField1.getText();
                if (text.trim().length() == 0) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("ANNULER");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField1.setText("Rechercher......");
        jTextField1.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jTextField1ComponentAdded(evt);
            }
        });
        jTextField1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTextField1AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Matricule", "Episode"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(jButton1)
                        .addGap(87, 87, 87)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            int selectedRow = jTable1.getSelectedRow();
            if (selectedRow != -1) {  
             ep= jTable1.getValueAt(selectedRow, 1).toString();}
            if(controle.controlepage==1)
            {controle.jTextField2.setText(ep);
            DefaultTableModel model1=(DefaultTableModel) controle.jTable1.getModel();
            for (int i = 0; i < model1.getRowCount(); i++) {
            model1.removeRow(i);}
             try{
            String sqlsel ="select * from Controlemalade where idpatient=? and episode=? ";
            pstsel = conn.prepareStatement(sqlsel);
            pstsel.setString(1,controle.jTextField1.getText());
            pstsel.setString(2,controle.jTextField2.getText());
            rssel=pstsel.executeQuery();
            if(rssel.next()){
            if(rssel.getString("Agglutinines").equals("Non")){
            controle.agnon.setSelected(true);
            }else{
            controle.agoui.setSelected(true);
            }
            controle.grouperh.setText(rssel.getString("grouperhesus"));
            controle.cont.setText(rssel.getString("Controlegpe"));
            controle.Antimal.setSelectedItem(rssel.getString("Compatibilitemalade"));
            controle.resmal.setText(rssel.getString("Resmalade"));
            controle.nomverif1.setText(rssel.getString("Nomverif"));
            String dateStr = rssel.getString("Date");
            DateFormat datef = new SimpleDateFormat("dd/MM/yyyy");
            Date d =datef.parse(dateStr);
            controle.datemal.setDate(d);
            }
             }  
            catch(SQLException e){
               JOptionPane.showMessageDialog(null,e);
            } catch (ParseException ex) {
                Logger.getLogger(episode.class.getName()).log(Level.SEVERE, null, ex);
            } 
            
            try{
            String sqlsel ="select * from `controle2` where idpatient=? and episode=? ";
            pstsel1 = conn.prepareStatement(sqlsel);
            pstsel1.setString(1,controle.jTextField1.getText());
            pstsel1.setString(2,controle.jTextField2.getText());
            rssel1=pstsel1.executeQuery();
           
            String[] T = new String [4];   
            DefaultTableModel model = (DefaultTableModel) controle.jTable1.getModel();
            while (rssel1.next()) {
            T[0]=rssel1.getString("NFlacon");
            T[1]=rssel1.getString("Groupe");
            T[2]=rssel1.getString("Compatible");
            T[3]=rssel1.getString("Resultat");
            
            model.addRow(T);}
            
            }
               
            catch(SQLException e){
               JOptionPane.showMessageDialog(null,e);
            } 
        
            
            }
            
            
            
            else if(declaration.declarationpage==1)
            {declaration.episode.setText(ep);
            
            }

            
            else if(Check2.checkpage==1){
            Check2.episode.setText(ep);
            
            try{
            String sqlsel ="select * from `checkp` where idpatient like ? and episode like ?";
            pstsel = conn.prepareStatement(sqlsel);
            pstsel.setString(1,Check2.jTextField1.getText());
            pstsel.setString(2,Check2.episode.getText());
            rssel=pstsel.executeQuery();
            if(rssel.next()){
            if(rssel.getString("Prescription").equals("Non")){
            Check2.presnon.setSelected(true);
            }else{
            Check2.presoui.setSelected(true);
            }
            if(rssel.getString("PSL").equals("Non")){
            Check2.pslnon.setSelected(true);
            }else{
            Check2.psloui.setSelected(true);
            }
            if(rssel.getString("NFS").equals("Non")){
            Check2.nfsnon.setSelected(true);
            }else{
            Check2.nfsoui.setSelected(true);
            }
             if(rssel.getString("GS").equals("Non")){
            Check2.gsnon.setSelected(true);
            }else{
            Check2.gsoui.setSelected(true);
            }
            if(rssel.getString("Phenotype").equals("Non")){
            Check2.phenonon.setSelected(true);
            }else{
            Check2.phenooui.setSelected(true);
            }
            if(rssel.getString("Conditionstransport").equals("Non")){
            Check2.condtrannon.setSelected(true);
            }else{
            Check2.condtranoui.setSelected(true);
            }
            if(rssel.getString("Bondonneur").equals("Non")){
            Check2.bondonnon.setSelected(true);
            }else{
            Check2.bondonoui.setSelected(true);
            }
            if(rssel.getString("Concordanceidentite").equals("Non")){
            Check2.conidennon.setSelected(true);
            }else{
            Check2.conidenoui.setSelected(true);
            }
            if(rssel.getString("Concordanceformulaire").equals("Non")){
            Check2.conformnon.setSelected(true);
            }else{
            Check2.conformoui.setSelected(true);
            }
            Check2.gpsl.setText(rssel.getString("GroupePSL"));
            if(rssel.getString("DateVerifie").equals("Non")){
            Check2.datevernon.setSelected(true);
            }else{
            Check2.dateveroui.setSelected(true);}
            
            String dateStr = rssel.getString("Date");
            DateFormat datef = new SimpleDateFormat("dd/MM/yyyy");
            Date d =datef.parse(dateStr);
            Check2.date1.setDate(d);
            if(rssel.getString("Produitsanguin").equals("Non")){
            Check2.prosangnon.setSelected(true);
            }else{
            Check2.prosangoui.setSelected(true);
            }
            Check2.observ.setText(rssel.getString("Observations"));
            if(rssel.getString("Resultatcross").equals("Non")){
            Check2.resulcronon.setSelected(true);
            }else{
            Check2.resulcrooui.setSelected(true);}
            if(rssel.getString("Patientinforme").equals("Non")){
            Check2.painfonon.setSelected(true);
            }else{
            Check2.painfooui.setSelected(true);}
            if(rssel.getString("Verificationidentite").equals("Non")){
            Check2.veridennon.setSelected(true);
            }else{
            Check2.veridenoui.setSelected(true);}
            Check2.poulpre.setText(rssel.getString("Poulepre"));
            Check2.tapre.setText(rssel.getString("TApre"));
            Check2.tpre.setText(rssel.getString("Tpre"));
            if(rssel.getString("Voieveineuse").equals("Non")){
            Check2.voienon.setSelected(true);
            }else{
            Check2.voieoui.setSelected(true);}
            if(rssel.getString("Testultime").equals("Non")){
            Check2.ulnon.setSelected(true);
            }else{
            Check2.uloui.setSelected(true);}
            if(rssel.getString("Resultatsurveillance").equals("Non")){
            Check2.resurnon.setSelected(true);
            }else{
            Check2.resuroui.setSelected(true);}
            Check2.ras.setText(rssel.getString("RAS"));
            Check2.into.setText(rssel.getString("Intolerance"));
            if(rssel.getString("ControleNFS").equals("Non")){
            Check2.connfsnon.setSelected(true);
            }else{
            Check2.connfsoui.setSelected(true);}
            Check2.respost.setText(rssel.getString("Resultat"));
            if(rssel.getString("Tracabilite").equals("Non")){
            Check2.tranon.setSelected(true);
            }else{
            Check2.traoui.setSelected(true);}
            Check2.poulpost.setText(rssel.getString("Poulspost"));
            Check2.tapost.setText(rssel.getString("TApost"));
            Check2.tpost.setText(rssel.getString("Tpost"));
            Check2.cons.setText(rssel.getString("Etatconscience"));
  
            }
             }  
            catch(SQLException e){
               JOptionPane.showMessageDialog(null,e);
            } catch (ParseException ex) {
                Logger.getLogger(episode.class.getName()).log(Level.SEVERE, null, ex);
            } 
            
            
            
            }
            
            
            
            
            else if(episodepage.episodepage1==1){
                episodepage.epi.setText(ep);
                try{
                  String sqlsel ="select * from episode where idepisode=? and idpatient=? ";
                  pstsel = conn.prepareStatement(sqlsel);
                  pstsel.setString(1,episodepage.epi.getText());
                  pstsel.setString(2,episodepage.matricule.getText());
                  rssel=pstsel.executeQuery();
                 if(rssel.next()){
                 episodepage.serv.setText(rssel.getString("service"));
                 String dateStr = rssel.getString("dateentree");
                 DateFormat datef = new SimpleDateFormat("dd/MM/yyyy");
                 Date d =datef.parse(dateStr);
                 episodepage.dateent.setDate(d);
                 episodepage.mode.setSelectedItem(rssel.getString("modeentree"));
                 episodepage.cause.setSelectedItem(rssel.getString("causetransfert"));

          }
            }
            catch(SQLException e){
               JOptionPane.showMessageDialog(null,e);
            } catch (ParseException ex) { 
         Logger.getLogger(inpatient.class.getName()).log(Level.SEVERE, null, ex);
     }
            }    
            
            
            
            
            
            
            
            
            
            
            else if(DossierPatient.dossierpatientpage==1){
              DossierPatient.episode.setText(ep);
              afficher(DossierPatient.jTextField1.getText(),ep);
               try{
            String sqlsel ="select * from patient where id=?";
            pst = conn.prepareStatement(sqlsel);
            pst.setString(1,jTextField1.getText());
            rs=pst.executeQuery();
             if(rs.next()){
            
           nom.setText(rs.getString("nom"));
           prenom.setText(rs.getString("prenom"));
           datenes.setText(rs.getString("datenes"));}
                 
         
         
         }
         catch(SQLException e){
               JOptionPane.showMessageDialog(null,e);
            }
             }
            hide();
         
          
    }//GEN-LAST:event_jButton1ActionPerformed
    public void afficher(String id,String ep){
         try{
          String sql ="select * from patient where id=? ";
          pst = conn.prepareStatement(sql);
          pst.setString(1,id );
          rs = pst.executeQuery();
          if(rs.next()){
             DossierPatient.nom.setText( rs.getString("nom"));
             DossierPatient.prenom.setText( rs.getString("prenom"));
             DossierPatient.datenes.setText( rs.getString("datenes"));
             
              
              
    
    
          }}
         catch(SQLException e){
               JOptionPane.showMessageDialog(null,e);
                  }
    
    }
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
    
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTextField1AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1AncestorAdded

    private void jTextField1ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jTextField1ComponentAdded
       
    }//GEN-LAST:event_jTextField1ComponentAdded

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        hide();
    }//GEN-LAST:event_jButton2ActionPerformed
                    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(inpatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(inpatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(inpatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(inpatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               episode p = new episode();
                       p.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
